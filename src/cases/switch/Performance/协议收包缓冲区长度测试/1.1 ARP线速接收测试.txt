*** Settings ***
Documentation     *使用指导*
...               ---
...               修改拓扑参数请设置 _topo_setup.txt_
...
...               修改测试参数请设置 _test_setup.txt_ 中的变量
...
...               如果没有生成图表（chart）文件，请检查是否安装了Python的pygal模块
Suite Setup       init-suite
Suite Teardown    unInit-suite
Resource          resource.txt

*** Test Cases ***
1.1 ARP线速接收测试
    [Setup]    init
    set arp packet
    : FOR    ${loop}    IN RANGE    1    ${testTrial}+1
    \    Ixiasend.Clear Statics    @{tp1}
    \    clear cpu-rx-stat protocol    ${s1}    arp
    \    #TP1开启抓包功能    通过TP1以线速打入指定数量(Burst Number)个Arp request报文
    \    Ixiasend.Start Capture    @{tp1}
    \    Ixiasend.Start Transmit    @{tp1}
    \    Ixiasend.Wait For Transmit Done    @{tp1}
    \    sleep    5s    wait for DUT response
    \    Ixiasend.Stop Capture    @{tp1}
    \    ${tp_tx}=    Ixiasend.Get Statics    @{tp1}    txpackets    #记录TP1发送的报文个数
    \    Ixiasend.Get Capture Packet    @{tp1}
    \    ${tp_rx}=    Get TP Receive Packet    #记录TP1接收到的回复报文个数
    \    ${dut_rx}=    Get Dut Receive Packet    #记录设备上接收到的协议报文个数
    \    recordResult    ${tp_tx}    ${tp_rx}    ${dut_rx}    #记录测试结果
    \    checkResult    ${tp_rx}    ${dut_rx}    #检查结果
    exportResult
    [Teardown]    unInit

*** Keywords ***
Create Chart File
    @{x_labels}=    Evaluate    ['Trial:'+str(i) for i in range(1,${testTrial}+1)]
    @{y_labels}=    Create List    ${${protocolLimitRate}*${checkCriteria1}}    ${checkCriteria2}    ${burstNum}
    ${barChart}=    Evaluate    pygal.Bar(width=800,height=600,spacing=50,legend_at_bottom=True,title=u'${TEST_NAME} devid:${SW_DEVICE_ID}',x_labels=${x_labels},y_labels=${y_labels},range=(0,${burstNum}),js=[r'${EXECDIR}${/}resource${/}svg.jquery.js',r'${EXECDIR}${/}resource${/}pygal-tooltips.js'])    pygal
    @{tp_rx_value_list}=    Create list
    @{dut_rx_value_list}=    Create list
    Set Test Variable    ${barChart}
    Set Test Variable    ${tp_rx_value_list}
    Set Test Variable    ${dut_rx_value_list}

Create Report File
    Append To File    ${reportPath}    \r\n \r\n Test Suite: ${SUITE_NAME} \r\n Test Case: ${TEST_NAME} \r\n
    ${time}=    Get Time
    Append To File    ${reportPath}    Excution Time: ${time}\r\n
    ${user}=    Evaluate    getpass.getuser()    getpass
    Append To File    ${reportPath}    Excution User: ${user}\r\n
    Append To File    ${reportPath}    Device Type: ${SW_DEVICE_ID}\r\n
    Append To File    ${reportPath}    Software Version: \r\n${SW_VERSION}\r\n
    ${dots}=    Evaluate    "\\r\\n"+'.'*100+"\\r\\n"
    Append To File    ${reportPath}    ${dots} \r\n
    Append To File    ${reportPath}    Dut指定协议默认限速值为: ${protocolLimitRate} \r\n 测试通过条件: \r\n
    Run Keyword If    ${passCondition} in [1,3]    Append To File    ${reportPath}    Pass Criteria: Rx packet>=${${protocolLimitRate}*${checkCriteria1}}[线速打入arp报文,设备应处理协议默认限速70%以上的报文] \r\n
    Run Keyword If    ${passCondition} in [2,3]    Append To File    ${reportPath}    Pass Criteria: Rx packet>=${checkCriteria1}} [线速打入arp报文,设备应处理指定数量以上的报文] \r\n
    Run Keyword If    ${passCondition} not in [1,2,3]    Append To File    ${reportPath}    warning: no specified! \r\n !!配置测试通过条件请修改\${passCondition}变量!! \r\n
    Append To File    ${reportPath}    \r\n Test Result：\r\n
    ${thead}=    Evaluate    "Trial:".ljust(10)+"Burst Num(Pkts):".ljust(20)+"TP Tx(Pkts):".ljust(20)+"TP Rx(Pkts):".ljust(20)+"DUT Rx(Pkts):".ljust(20)+"Result:".ljust(10)+"\\r\\n"
    Append To File    ${reportPath}    ${thead}
    ${line}=    Evaluate    '-'*100+"\\r\\n"
    Append To File    ${reportPath}    ${line}

Get Dut Receive Packet
    ${ret}=    Exec Cmd    ${s1}    ${CMD}
    ${dut_rx}=    Tools.Get Value From String    ${ret}    (?sm)Type.*?^\\w+\\s+\\d+\\s+(\\d+)    #获取TotPkts计数
    [Return]    ${dut_rx}

Get TP Receive Packet
    ${rx_num}    ${rx_packets}=    Ixiasend.Filter Capture Packet    @{tp1}    arp
    [Return]    ${rx_num}

checkResult
    [Arguments]    ${tp_rx}    ${dut_rx}
    #确定检查结果判断依据    #测试仪收包数量or交换机收包数量
    ${check_num}=    Set Variable If    ${checkTpReceive}==${1}    ${tp_rx}    ${checkDutReceive}==${1}    ${dut_rx}
    #检查条件1
    ${checkRes1}=    Set Variable If    ${check_num}>=${protocolLimitRate}*${checkCriteria1}    ${True}    ${False}
    #检查条件2
    ${checkRes2}=    Set Variable If    ${check_num}>=${checkCriteria2}    ${True}    ${False}
    #输出结果并记录
    ${result}=    Run Keyword If    ${passCondition}==${1}    Set Variable    ${checkRes1}    ELSE IF    ${passCondition}==${2}
    ...    Set Variable    ${checkRes2}    ELSE IF    ${passCondition}==${3}    Evaluate    ${checkRes1} and ${checkRes2}
    ...    ELSE    Set Variable    ${True}
    Run Keyword And Continue On Failure    Should Be True    ${result}
    Run Keyword If    ${passCondition} not in [1,2,3]    Append To File    ${reportPath}    N/A \r\n    ELSE IF    ${result}
    ...    Append To File    ${reportPath}    PASS \r\n    ELSE    Append To File    ${reportPath}
    ...    Fail \r\n

clean up dut
    Exec Cmd List In ConfigMode    ${s1}    no interface vlan 1
    Exec Cmd List In ConfigMode    ${s1}    no cpu-rx-ratelimit protocol arp    no cpu-rx-ratelimit total

clean up testPort
    Ixiasend.Set Port Mode Default    @{tp1}

exportResult
    log file    ${reportPath}
    ${path}    ${svgFile}=    Split Path    ${chartPath}
    log    <embed type="image/svg+xml" src="${svgFile}" \ width=800 height=600/>    HTML

get burstNum
    Return From Keyword if    ${burstNum}!=${-1}
    ${ret}=    Exec Cmd slowly    ${s1}    show cpu-rx protocol all | include TOTAL
    ${totalLimitRate}=    Tools.Get Value From String    ${ret}    TOTAL.*?(\\d+)
    Set Test Variable    ${burstNum}    ${totalLimitRate}

get protocolCMD
    ${ret}=    exec cmd    ${s1}    show slot
    ${isVSF}=    Tools.Is Match From String    ${ret}    member    #判断是否堆叠
    ${isSlot}=    Tools.Is Match From String    ${ret}    slot    #判断是否机架设备
    ${portNum}=    Tools.Get Value From String    ${s1p1}    .*?(\\d+.*)    #获取端口号
    @{portSplit}=    Split String    ${portNum}    /    #拆分端口号
    ${memberSlot}=    Run Keyword If    ${isVSF} and ${isSlot}    Set Variable    member ${portSplit[0]} slot ${portSplit[1]}    ELSE IF    ${isVSF}
    ...    Set Variable    member ${portSplit[0]}    ELSE IF    ${isSlot}    Set Variable    slot ${portSplit[0]}
    ...    ELSE    Set Variable    ${EMPTY}    #根据是否堆叠，机架确定执行的命令
    ${CMD}=    Evaluate    "show cpu-rx protocol ARP " + "${memberSlot}"    #确定Show cpu-rx的参数
    Set Test Variable    ${CMD}

get protocolLimitRate
    ${ret}=    Exec Cmd    ${s1}    ${CMD}
    ${protocolLimitRate}=    Tools.Get Value From String    ${ret}    (?sm)Type.*?^\\w+\\s+(\\d+)    #获取协议缺省限速值
    Set Test Variable    ${protocolLimitRate}

init
    tools.Comment    !!Start!! Test-Case: ${TEST_NAME}
    setup var    #初始化必要的变量
    setup dut    #初始化被测设备
    setup testPort    #初始化测试端口

recordResult
    [Arguments]    ${tp_tx}    ${tp_rx}    ${dut_rx}
    #save as file    保存到文件
    Run Keyword If    ${loop}==${1}    Create Report File    #首次记录时先创建report文件
    ${line}=    Evaluate    "${loop}".ljust(10)+"${burstNum}".ljust(20)+"${tp_tx}".ljust(20)+"${tp_rx}".ljust(20)+"${dut_rx}".ljust(20)    #记录本次测试结果
    Append To File    ${reportPath}    ${line}
    #save as charts    保存为图表
    Run Keyword If    ${loop}==${1}    Create Chart File    #首次记录时先创建chart文件    #同时创建@{tp_rx_value_list},@{dut_rx_value_list},${barChart}变量
    ${tp_rx}=    Convert To Integer    ${tp_rx}
    ${dut_rx}=    Convert To Integer    ${dut_rx}
    ${tpDict}=    Create Dictionary    value    ${tp_rx}    label    Tp Rx(pkts)
    ${dutDict}=    Create Dictionary    value    ${dut_rx}    label    Dut Rx(pkts)
    Append To List    ${tp_rx_value_list}    ${tpDict}
    Append To List    ${dut_rx_value_list}    ${dutDict}
    Run Keyword If    ${loop}==${testTrial}    Call Method    ${barChart}    add    Tp Receive(pkts)    ${tp_rx_value_list}
    Run Keyword If    ${loop}==${testTrial}    Call Method    ${barChart}    add    Dut Receive(pkts)    ${dut_rx_value_list}
    Run Keyword If    ${loop}==${testTrial}    Call Method    ${barChart}    render_to_file    ${chartPath}

set arp packet
    Ixiasend.Build Ether    dst=FF:FF:FF:FF:FF:FF    src=00:00:10:01:01:02
    Ixiasend.Build Arp    hwsrc=00:00:10:01:01:02    psrc=10.1.1.2    pdst=10.1.1.1
    Ixiasend.Build Packet    length=${frameSize}
    Ixiasend.Set Stream Packet By api    @{tp1}    streamId=1
    Ixiasend.Set Stream Control    @{tp1}    streamId=1    streamRate=${streamRate}    streamRateMode=${streamRateMode}    streamMode=${IXIA_StreamMode_stop}    numPackets=${burstNum}

setup dut
    #配置地址
    Exec Cmd List In ConfigMode    ${s1}    interface vlan 1    ip address 10.1.1.1 255.255.255.0
    #放开协议限速及总限速
    Exec Cmd List In ConfigMode    ${s1}    cpu-rx-ratelimit total 0    cpu-rx-ratelimit protocol arp 2000
    #清除相关计数统计
    Enable Mode    ${s1}
    Exec Cmd    ${s1}    clear cpu-rx-stat protocol all
    #debug
    show for debug

setup testPort
    Ixiasend.Set Port Mode Default    @{tp1}

setup var
    get burstNum    #获取发包数量
    get protocolCMD    #获取查看协议收包的命令行
    get protocolLimitRate    #获取协议默认限速值
    ${SW_VERSION}=    Show Version    ${s1}    #获取版本信息
    ${SW_DEVICE_ID}=    Get Device ID    ${s1}    #获取设备device type
    Set Test Variable    ${SW_VERSION}
    Set Test Variable    ${SW_DEVICE_ID}
    ${time}=    Get Time    epoch
    ${reportPath}=    Set Variable    ${OUTPUTDIR}\\testReport_${time}.txt    #获取测试报告文件路径
    ${chartPath}=    Set Variable    ${OUTPUTDIR}\\testReport_${time}.svg    #获取测试报告图表文件路径
    Set Test Variable    ${reportPath}
    Set Test Variable    ${chartPath}

show for debug
    Return From Keyword If    ${DEBUG} != ${True}
    Exec Cmd    ${s1}    show cpu-rx protocol all

unInit
    clean up dut
    clean up testPort
    tools.Comment    !!END!! Test-Case: ${TEST_NAME}
