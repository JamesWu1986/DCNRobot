*** Settings ***
Library           Collections
Library           String
Library           ../lib/Tools.py
Library           ../lib/MyTelnet.py    WITH NAME    Telnet

*** Variables ***
${wifi_ap_prompt}    (?m)^[-a-zA-Z0-9_]{1,30}#( )?|^Bootloader/>( )?|^~\\s#
${wifi_ap_prompt_is_regexp}    ${True}
${wifi_ap_default_log_level}    ${None}
${wifi_ap_terminal_type}    vt100
${wifi_ap_terminal_emulation}    ${True}
${wifi_ap_timeout}    1 minute
${wifi_ap_regexp_reload}    (?m)^[-a-zA-Z0-9_]{1,30}( )?login:
${wifi_ap_monitor}    ${True}
${wifi_ap_monitor_loglevel}    INFO
${wifi_ap_login_regexp}    (?m)^[-a-zA-Z0-9_]{1,30}( )?login:
${wifi_ap_username}    admin
${wifi_ap_password}    admin

*** Keywords ***
Open Console
    [Arguments]    ${ip}    ${port}    ${alias}
    [Documentation]    打开console连接，一般用于test suite的setup中
    ...
    ...    注意：Telnet实例的生存范围是test suite，即在同一个test suite里采用Open Console打开的连接是可用的，在另一个test suite中是不能引用的，故需要在每个test suite里建立setup来Open Console及在teardown中Close Console
    ...
    ...    \ \ - 默认情况，timeout为1分钟
    ...    \ - 默认情况，会打开monitor选项，即将console的输出另存一份，以获得整个console的输出
    ...
    ...    args：
    ...    - ip \ \ \ \ ： \ \ CCM地址
    ...    - port \ ： \ CCM端口号
    ...    - alias \ ： \ \ 别名，一般在测试例集中定义
    ...
    ...    return： 无
    ...
    ...    example：
    ...    | Open Console | 172.16.11.51 | ${10001} | s1 |
    ...    | Open Console | ${s1_ip} | ${s1_port} | ${s1_alias} |
    Telnet.Open Connection    ${ip}    ${alias}    ${port}    timeout=${wifi_ap_timeout}    prompt_is_regexp=${wifi_ap_prompt_is_regexp}    prompt=${wifi_ap_prompt}
    ...    default_log_level=${wifi_ap_default_log_level}    terminal_emulation=${wifi_ap_terminal_emulation}    terminal_type=${wifi_ap_terminal_type}    monitor=${wifi_ap_monitor}
    AP.Enable Mode    ${alias}

Enable Mode
    [Arguments]    ${alias}
    [Documentation]    设备进入Enable模式，同时执行terminal length 0，以防止--more--
    ...
    ...    args:
    ...    - alias 别名
    Telnet.Switch Connection    ${alias}
    Telnet.Write Bare    \n
    ${output}=    Telnet.Read Until Regexp    ${wifi_ap_login_regexp}    ${wifi_ap_prompt}
    ${loginFlag}=    Tools.Is Match From String    ${output}    ${wifi_ap_login_regexp}
    Run Keyword If    ${loginFlag}    AP.Login    ${alias}
    Telnet.Read

Exec Cmd
    [Arguments]    ${alias}    ${cmd}
    [Documentation]    向设备输入命令，一般情况，建议使用Exec Cmd List，这样可以更清晰的表达这组命令的意义
    ...
    ...    args：
    ...    - alias
    ...    - cmd ： 命令
    ...
    ...    return：
    ...    - output：设备对该命令的响应
    AP.Enable Mode    ${alias}
    ${output}=    Telnet.Execute Command    ${cmd}
    [Return]    ${output}

Close Console
    [Arguments]    ${alias}    ${monitor_loglevel}=${wifi_ap_monitor_loglevel}    ${monitor}=${wifi_ap_monitor}
    [Documentation]    关闭console连接，一般用于test suite的teardown中
    ...
    ...    注意：Telnet实例的生存范围是test suite，即在同一个test suite里采用Open Console打开的连接是可用的，在另一个test suite中是不能引用的，故需要在每个test suite里建立setup来Open Console及在teardown中Close Console
    ...
    ...    args：
    ...    - alias \ ： \ \ 别名，一般在测试例集中定义
    ...
    ...    return： 无
    ...
    ...    example：
    ...    | Close Console | s1 |
    ...    | Close Console | ${s1_alias} |
    Telnet.Switch Connection    ${alias}
    Telnet.Set Monitor    ${monitor}
    Telnet.Close Connection    ${monitor_loglevel}

Close All Console
    [Documentation]    该关键字不能将console的全部输出记录到log里，不建议使用
    ...
    ...    Closes all open connections and empties the connection cache.
    ...
    ...    If multiple connections are opened, this keyword should be used in a test or suite teardown to make sure that all connections are closed. It is not an error is some of the connections have already been closed by `Close Connection`.
    ...
    ...    After this keyword, new indexes returned by `Open Connection` keyword are reset to 1.
    Telnet.Close All Connections

Exec Cmd Until Regexp
    [Arguments]    ${alias}    ${cmd}    ${regexp}
    [Documentation]    该关键字用于执行一条命令，用正则匹配返回信息，直到匹配成功，匹配不成功会导致该关键字失败
    ...
    ...    注意：该关键字不会读取返回信息在匹配字符后面的内容，会导致后面的读取信息中包含该关键字的内容，容易出错，请慎用，如必须采用，请在该关键字后执行Telnet.Read来消耗掉整个返回信息
    ...
    ...    Exec cmd and reads output until any of the `expected` regular expressions match.
    ...
    ...    This keyword accepts any number of regular expressions patterns or compiled Python regular expression objects as arguments. Text up to and including the first match to any of the regular expressions is returned and logged. If no match is found, this keyword fails. How much to wait for the output depends on the configured timeout.
    ...
    ...    See the documentation of Python `re` module for more information about the supported regular expression syntax. Notice that possible backslashes need to be escaped in Robot Framework test data.
    ...
    ...    Examples:
    ...    | Exec Cmd Until Regexp | s1 | show version | 1.0 |
    Telnet.Switch Connection    ${alias}
    Telnet.Write    ${cmd}
    ${output}=    Telnet.Read Until Regexp    ${regexp}
    [Return]    ${output}

Exec Cmd List
    [Arguments]    ${alias}    @{cmd_list}
    [Documentation]    KeyWord: Exec Cmd List
    ...
    ...    \ exec command list based on enable mode
    ...
    ...    args:
    ...
    ...    - ${alias}: alias name of console,built on keyword of Open Console
    ...    - @{cmd_list}: list of cmd string
    ...
    ...    example:
    ...    | Exec Cmd List | ${s1_alias} | show version |
    ...    | Exec Cmd List | ${s1_alias} | config | interface ${s1p1} | shutdown |
    AP.Enable Mode    ${alias}
    ${output_list}    Create List
    : FOR    ${cmd}    IN    @{cmd_list}
    \    ${out}=    AP.Exec Cmd    ${alias}    ${cmd}
    \    Collections.Append To List    ${output_list}    ${out}
    Log List    ${output_list}
    [Return]    ${output_list}

Reboot AP
    [Arguments]    ${alias}    ${write}=${True}    ${wait}=5    ${regexp_reload}=${wifi_ap_regexp_reload}    ${timeout}=10 minutes
    [Documentation]    重启AP设备
    ...
    ...    args：
    ...    - ${alias}：Open Console时设置的别名
    ...    - ${write}: 是否保存配置，默认为True
    ...    - ${wait}: \ 匹配到重启成功字符后的等待时间，默认为5s，一般不用修改
    ...    - ${regexp_reload}: 重启完成的匹配字符，默认为(?m)^[-a-zA-Z0-9_]{1,30}( )?login:
    ...    - ${timeout}: 最长等待时间，默认为10分钟，超过会报错
    Run Keyword If    ${write}    AP.Save Running    ${alias}
    Run Keyword Unless    ${write}    AP.Enable Mode    ${alias}
    Telnet.Write    reboot
    Telnet.Read Until Regexp    \\[Y/N\\]
    Telnet.Write    Y
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_reload}
    Telnet.Set Timeout    ${wifi_ap_timeout}
    Sleep    ${wait}
    Telnet.Read
    AP.Enable Mode    ${alias}

Save Running
    [Arguments]    ${alias}
    [Documentation]    保存AP的配置
    ...
    ...    args：
    ...    - ${alias}：Open Console时设置的别名
    AP.Enable Mode    ${alias}
    Telnet.Execute Command    save-running

Factory Reset
    [Arguments]    ${alias}    ${wait}=5    ${regexp_reload}=${wifi_ap_regexp_reload}    ${timeout}=10 minutes
    [Documentation]    set default switch
    ...
    ...    args:
    ...    - ${alias} ailas name of the console connection, built on keyWord of Open Console
    ...
    ...    example:
    ...    | Set Default | ${s1_alias} |
    AP.Enable Mode    ${alias}
    Telnet.Write    factory-reset
    Telnet.Read Until Regexp    \\(y/n\\)\\?
    Telnet.Write    y
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_reload}
    Telnet.Set Timeout    ${wifi_ap_timeout}
    Sleep    ${wait}
    Telnet.Read
    AP.Enable Mode    ${alias}

Get System
    [Arguments]    ${alias}
    [Documentation]    获取AP的系统信息
    ...
    ...    args：
    ...    - ${alias}：Open Console时设置的别名
    AP.Enable Mode    ${alias}
    ${output}=    Telnet.Execute Command    get system
    [Return]    ${output}

Get Management Mac
    [Arguments]    ${alias}
    [Documentation]    获取AP的mac
    ...
    ...    args：
    ...    - ${alias}：Open Console时设置的别名
    ${output}=    AP.Exec Cmd    ${alias}    get management
    ${baseMac}    Tools.Get Value From String    ${output}    mac\\s+(.*?)\\r\\n
    Should Not Be Equal    ${baseMac}    ${None}
    [Return]    ${baseMac}

Enter BootRom From Img
    [Arguments]    ${alias}    ${regexp_testram}=Hit any key to stop autoboot:    ${regexp_bootrom}=Bootloader/>( )?    ${timeout}=3 minutes
    [Documentation]    从img进入bootrom
    ...
    ...    args：
    ...    - ${alias}：Open Console时设置的别名
    ...    - ${regexp_testram}: 内存检测的匹配字符，默认为Hit any key to stop autoboot:
    ...    - ${regexp_bootrom}: 进入bootrom的匹配字符，默认为Bootloader/>( )?
    ...    - ${timeout}: 最长等待时间，默认为3分钟，超过会报错
    AP.Enable Mode    ${alias}
    Telnet.Write    reboot
    Telnet.Read Until Regexp    \\[Y/N\\]
    Telnet.Write    Y
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_testram}
    Telnet.Write Bare    ${SPACE}
    Telnet.Read Until Regexp    ${regexp_bootrom}
    Telnet.Set Timeout    ${wifi_ap_timeout}
    Telnet.Read

Enter BootRom From BootRom
    [Arguments]    ${alias}    ${regexp_testram}=Hit any key to stop autoboot:    ${regexp_bootrom}=Bootloader/>( )?    ${timeout}=3 minutes
    [Documentation]    从bootrom进入bootrom
    ...
    ...    args：
    ...    - ${alias}：Open Console时设置的别名
    ...    - ${regexp_testram}: 内存检测的匹配字符，默认为Hit any key to stop autoboot:
    ...    - ${regexp_bootrom}: 进入bootrom的匹配字符，默认为Bootloader/>( )?
    ...    - ${timeout}: 最长等待时间，默认为3分钟，超过会报错
    Telnet.Switch Connection    ${alias}
    Telnet.Write    reset
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_testram}
    Telnet.Write Bare    ${SPACE}
    Telnet.Read Until Regexp    ${regexp_bootrom}
    Telnet.Set Timeout    ${wifi_ap_timeout}
    Telnet.Read

Login
    [Arguments]    ${alias}    ${username}=${wifi_ap_username}    ${password}=${wifi_ap_password}
    Telnet.Switch Connection    ${alias}
    Telnet.Write    ${username}
    Telnet.Read Until Regexp    Password:
    Telnet.Write    ${password}
    Telnet.Read Until Prompt
