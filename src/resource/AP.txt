*** Settings ***
Library           Collections
Library           String
Library           ../lib/Tools.py
Library           ../lib/MyTelnet.py    WITH NAME    Telnet

*** Variables ***
${wifi_ap_prompt}    (?m)^[-a-zA-Z0-9_]{1,30}#( )?|^Bootloader/>( )?|^~\\s#
${wifi_ap_prompt_is_regexp}    ${True}
${wifi_ap_default_log_level}    ${None}
${wifi_ap_terminal_type}    vt100
${wifi_ap_terminal_emulation}    ${True}
${wifi_ap_timeout}    1 minute
${wifi_ap_regexp_reload}    (?m)^[-a-zA-Z0-9_]{1,30}( )?login:
${wifi_ap_monitor}    ${True}
${wifi_ap_monitor_loglevel}    INFO
${wifi_ap_login_regexp}    (?m)^[-a-zA-Z0-9_]{1,30}( )?login:
${wifi_ap_username}    admin
${wifi_ap_password}    admin

*** Keywords ***
Open Console
    [Arguments]    ${ip}    ${port}    ${alias}
    [Documentation]    打开console连接，一般用于测试例初始化时，建议在测试集中定于 Init Test Case关键字，其中引用Open Console，打开需要控制的console；
    ...    \ \ - 默认情况，timeout为1分钟
    ...    \ - 默认情况，会打开monitor选项，即将console的输出另存一份，以获得整个console的输出
    ...
    ...    args：
    ...    - ip \ \ \ \ ： \ \ CCM地址
    ...    - port \ ： \ CCM端口号
    ...    - alias \ ： \ \ 别名，一般在测试例集中定义
    ...
    ...    return： 无
    ...
    ...    example：
    ...    | Open Console | 172.16.11.51 | ${10001} | s1 |
    ...    | Open Console | ${s1_ip} | ${s1_port} | ${s1_alias} |
    Telnet.Open Connection    ${ip}    ${alias}    ${port}    timeout=${wifi_ap_timeout}    prompt_is_regexp=${wifi_ap_prompt_is_regexp}    prompt=${wifi_ap_prompt}
    ...    default_log_level=${wifi_ap_default_log_level}    terminal_emulation=${wifi_ap_terminal_emulation}    terminal_type=${wifi_ap_terminal_type}    monitor=${wifi_ap_monitor}
    AP.Enable Mode    ${alias}

Enable Mode
    [Arguments]    ${alias}
    [Documentation]    设备进入Enable模式，同时执行terminal length 0，以防止--more--
    ...
    ...    args:
    ...    - alias 别名
    Telnet.Switch Connection    ${alias}
    Telnet.Write Bare    \n
    ${output}=    Telnet.Read Until Regexp    ${wifi_ap_login_regexp}    ${wifi_ap_prompt}
    ${loginFlag}=    Tools.Is Match From String    ${output}    ${wifi_ap_login_regexp}
    Run Keyword If    ${loginFlag}    AP.Login    ${alias}
    Telnet.Read

Exec Cmd
    [Arguments]    ${alias}    ${cmd}
    [Documentation]    向设备输入命令，一般情况，建议使用Exec Cmd List，这样可以更清晰的表达这组命令的意义
    ...
    ...    args：
    ...    - alias
    ...    - cmd ： 命令
    ...
    ...    return：
    ...    - output：设备对该命令的响应
    AP.Enable Mode    ${alias}
    ${output}=    Telnet.Execute Command    ${cmd}
    [Return]    ${output}

Close Console
    [Arguments]    ${alias}    ${monitor_loglevel}=${wifi_ap_monitor_loglevel}    ${monitor}=${wifi_ap_monitor}
    Telnet.Switch Connection    ${alias}
    Telnet.Set Monitor    ${monitor}
    Telnet.Close Connection    ${monitor_loglevel}

Close All Console
    Telnet.Close All Connections

Exec Cmd Until Regexp
    [Arguments]    ${alias}    ${cmd}    ${regexp}
    Telnet.Switch Connection    ${alias}
    Telnet.Write    ${cmd}
    ${output}=    Telnet.Read Until Regexp    ${regexp}
    [Return]    ${output}

Exec Cmd List
    [Arguments]    ${alias}    @{cmd_list}
    [Documentation]    KeyWord: Exec Cmd List
    ...
    ...    \ exec command list based on enable mode
    ...
    ...    args:
    ...
    ...    - ${alias}: alias name of console,built on keyword of Open Console
    ...    - @{cmd_list}: list of cmd string
    ...
    ...    example:
    ...    | Exec Cmd List | ${s1_alias} | show version |
    ...    | Exec Cmd List | ${s1_alias} | config | interface ${s1p1} | shutdown |
    AP.Enable Mode    ${alias}
    ${output_list}    Create List
    : FOR    ${cmd}    IN    @{cmd_list}
    \    ${out}=    AP.Exec Cmd    ${alias}    ${cmd}
    \    Collections.Append To List    ${output_list}    ${out}
    Log List    ${output_list}
    [Return]    ${output_list}

Reboot AP
    [Arguments]    ${alias}    ${write}=${True}    ${wait}=5    ${regexp_reload}=${wifi_ap_regexp_reload}    ${timeout}=10 minutes
    Run Keyword If    ${write}    AP.Save Running    ${alias}
    Run Keyword Unless    ${write}    AP.Enable Mode    ${alias}
    Telnet.Write    reboot
    Telnet.Read Until Regexp    \\[Y/N\\]
    Telnet.Write    Y
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_reload}
    Telnet.Set Timeout    ${wifi_ap_timeout}
    Sleep    ${wait}
    Telnet.Read
    AP.Enable Mode    ${alias}

Save Running
    [Arguments]    ${alias}
    AP.Enable Mode    ${alias}
    Telnet.Execute Command    save-running

Factory Reset
    [Arguments]    ${alias}    ${wait}=5    ${regexp_reload}=${wifi_ap_regexp_reload}    ${timeout}=10 minutes
    [Documentation]    set default switch
    ...
    ...    args:
    ...    - ${alias} ailas name of the console connection, built on keyWord of Open Console
    ...
    ...    example:
    ...    | Set Default | ${s1_alias} |
    AP.Enable Mode    ${alias}
    Telnet.Write    factory-reset
    Telnet.Read Until Regexp    \\(y/n\\)\\?
    Telnet.Write    y
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_reload}
    Telnet.Set Timeout    ${wifi_ap_timeout}
    Sleep    ${wait}
    Telnet.Read
    AP.Enable Mode    ${alias}

Get System
    [Arguments]    ${alias}
    AP.Enable Mode    ${alias}
    ${output}=    Telnet.Execute Command    get system
    [Return]    ${output}

Get Management Mac
    [Arguments]    ${alias}
    ${output}=    AP.Exec Cmd    ${alias}    get management
    ${baseMac}    Tools.Get Value From String    ${output}    mac\\s+(.*?)\\r\\n
    Should Not Be Equal    ${baseMac}    ${None}
    [Return]    ${baseMac}

Enter BootRom From Img
    [Arguments]    ${alias}    ${regexp_testram}=Hit any key to stop autoboot:    ${regexp_bootrom}=Bootloader/>( )?    ${timeout}=3 minutes
    AP.Enable Mode    ${alias}
    Telnet.Write    reboot
    Telnet.Read Until Regexp    \\[Y/N\\]
    Telnet.Write    Y
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_testram}
    Telnet.Write Bare    ${SPACE}
    Telnet.Read Until Regexp    ${regexp_bootrom}
    Telnet.Set Timeout    ${wifi_ap_timeout}
    Telnet.Read

Enter BootRom From BootRom
    [Arguments]    ${alias}    ${regexp_testram}=Hit any key to stop autoboot:    ${regexp_bootrom}=Bootloader/>( )?    ${timeout}=3 minutes
    Telnet.Switch Connection    ${alias}
    Telnet.Write    reset
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_testram}
    Telnet.Write Bare    ${SPACE}
    Telnet.Read Until Regexp    ${regexp_bootrom}
    Telnet.Set Timeout    ${wifi_ap_timeout}
    Telnet.Read

Login
    [Arguments]    ${alias}    ${username}=${wifi_ap_username}    ${password}=${wifi_ap_password}
    Telnet.Switch Connection    ${alias}
    Telnet.Write    ${username}
    Telnet.Read Until Regexp    Password:
    Telnet.Write    ${password}
    Telnet.Read Until Prompt
