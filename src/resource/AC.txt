*** Settings ***
Library           Collections
Library           String
Library           ../lib/Tools.py
Library           ../lib/MyTelnet.py    WITH NAME    Telnet
Library           OperatingSystem

*** Variables ***
${wifi_ac_prompt}    (?m)^[-a-zA-Z0-9_]{1,30}(\\(.*\\))?#|^\\[Boot\\]:|^BCM\.[0-9]>|^->|^--More--|Exit from bcm shell mode|^Host IP Address:|^Server IP Address:
${wifi_ac_prompt_is_regexp}    ${True}
${wifi_ac_default_log_level}    ${None}
${wifi_ac_terminal_type}    vt100
${wifi_ac_terminal_emulation}    ${True}
${wifi_ac_timeout}    1 minute
${wifi_ac_regexp_reload}    User Access Verification
${wifi_ac_monitor}    ${True}
${wifi_ac_monitor_loglevel}    INFO
${wifi_ac_login_regexp}    (?m)^Username:
${wifi_ac_username}    admin
${wifi_ac_password}    admin

*** Keywords ***
Open Console
    [Arguments]    ${ip}    ${port}    ${alias}
    [Documentation]    打开console连接，一般用于测试例初始化时，建议在测试集中定于 Init Test Case关键字，其中引用Open Console，打开需要控制的console；
    ...    \ \ - 默认情况，timeout为1分钟
    ...    \ - 默认情况，会打开monitor选项，即将console的输出另存一份，以获得整个console的输出
    ...
    ...    args：
    ...    - ip \ \ \ \ ： \ \ CCM地址
    ...    - port \ ： \ CCM端口号
    ...    - alias \ ： \ \ 别名，一般在测试例集中定义
    ...
    ...    return： 无
    ...
    ...    example：
    ...    | Open Console | 172.16.11.51 | ${10001} | s1 |
    ...    | Open Console | ${s1_ip} | ${s1_port} | ${s1_alias} |
    Telnet.Open Connection    ${ip}    ${alias}    ${port}    timeout=${wifi_ac_timeout}    prompt_is_regexp=${wifi_ac_prompt_is_regexp}    prompt=${wifi_ac_prompt}
    ...    default_log_level=${wifi_ac_default_log_level}    terminal_emulation=${wifi_ac_terminal_emulation}    terminal_type=${wifi_ac_terminal_type}    monitor=${wifi_ac_monitor}
    AC.Enable Mode    ${alias}
    AC.Set Exec TimeOut    ${alias}

Enable Mode
    [Arguments]    ${alias}
    [Documentation]    设备进入Enable模式，同时执行terminal length 0，以防止--more--
    ...
    ...    args:
    ...    - alias 别名
    Telnet.Switch Connection    ${alias}
    Telnet.Write Bare    \x03
    ${output}=    Telnet.Read Until Regexp    ${wifi_ac_login_regexp}    ${wifi_ac_prompt}
    ${loginFlag}=    Tools.Is Match From String    ${output}    ${wifi_ac_login_regexp}
    Run Keyword If    ${loginFlag}    AC.Login    ${alias}
    Telnet.Read
    Telnet.Execute Command    terminal length 0

Exec Cmd
    [Arguments]    ${alias}    ${cmd}
    [Documentation]    向设备输入命令，一般情况，建议使用Exec Cmd List，这样可以更清晰的表达这组命令的意义
    ...
    ...    args：
    ...    - alias
    ...    - cmd ： 命令
    ...
    ...    return：
    ...    - output：设备对该命令的响应
    Telnet.Switch Connection    ${alias}
    ${output}=    Telnet.Execute Command    ${cmd}
    [Return]    ${output}

Close Console
    [Arguments]    ${alias}    ${monitor_loglevel}=${wifi_ac_monitor_loglevel}    ${monitor}=${wifi_ac_monitor}
    Telnet.Switch Connection    ${alias}
    Telnet.Set Monitor    ${monitor}
    Telnet.Close Connection    ${monitor_loglevel}

Close All Console
    Telnet.Close All Connections

Exec Cmd Until Regexp
    [Arguments]    ${alias}    ${cmd}    ${regexp}
    Telnet.Switch Connection    ${alias}
    Telnet.Write    ${cmd}
    ${output}=    Telnet.Read Until Regexp    ${regexp}
    [Return]    ${output}

Exec Cmd List
    [Arguments]    ${alias}    @{cmd_list}
    [Documentation]    KeyWord: Exec Cmd List
    ...
    ...    \ exec command list based on enable mode
    ...
    ...    args:
    ...
    ...    - ${alias}: alias name of console,built on keyword of Open Console
    ...    - @{cmd_list}: list of cmd string
    ...
    ...    example:
    ...    | Exec Cmd List | ${s1_alias} | show version |
    ...    | Exec Cmd List | ${s1_alias} | config | interface ${s1p1} | shutdown |
    AC.Enable Mode    ${alias}
    ${output_list}    Create List
    : FOR    ${cmd}    IN    @{cmd_list}
    \    ${out}=    AC.Exec Cmd    ${alias}    ${cmd}
    \    Collections.Append To List    ${output_list}    ${out}
    Log List    ${output_list}
    [Return]    ${output_list}

Exec Cmd List In ConfigMode
    [Arguments]    ${alias}    @{cmd_list}
    [Documentation]    KeyWord: Exec Cmd List In ConfigMode
    ...
    ...    \ exec command list based on config mode
    ...
    ...    args:
    ...
    ...    - ${alias}: alias name of console,built on keyword of Open Console
    ...    - @{cmd_list}: list of cmd string
    ...
    ...    example:
    ...    | Exec Cmd List In ConfigMode | ${s1_alias} | interface ${s1p1} | shutdown |
    AC.Enable Mode    ${alias}
    AC.Exec Cmd    ${alias}    config
    ${output_list}    Create List
    : FOR    ${cmd}    IN    @{cmd_list}
    \    ${out}=    AC.Exec Cmd    ${alias}    ${cmd}
    \    Collections.Append To List    ${output_list}    ${out}
    Log List    ${output_list}

Reload AC
    [Arguments]    ${alias}    ${write}=${True}    ${wait}=10    ${regexp_reload}=${wifi_ac_regexp_reload}    ${timeout}=20 minutes
    Run Keyword If    ${write}    AC.Write Config    ${alias}
    Run Keyword Unless    ${write}    AC.Enable Mode    ${alias}
    Telnet.Write    reload
    Telnet.Read Until Regexp    \\[Y/N\\]
    Telnet.Write    Y
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_reload}
    Telnet.Set Timeout    ${wifi_ac_timeout}
    Sleep    ${wait}
    Telnet.Read
    AC.Enable Mode    ${alias}
    AC.Set Exec TimeOut    ${alias}

Write Config
    [Arguments]    ${alias}
    AC.Enable Mode    ${alias}
    Telnet.Write    write
    ${output}=    Telnet.Read Until Regexp    \\[Y/N\\]:    [-a-zA-Z0-9_. ]{1,30}(\\(.*\\))?#
    ${writeFlag}=    Tools.Is Match From String    ${output}    \\[Y/N\\]:
    Run Keyword If    ${writeFlag}    Telnet.Write    Y
    Run Keyword If    ${writeFlag}    Telnet.Read Until Prompt
    Run Keyword Unless    ${writeFlag}    Telnet.Read

Set Default
    [Arguments]    ${alias}
    [Documentation]    set default switch
    ...
    ...    args:
    ...    - ${alias} ailas name of the console connection, built on keyWord of Open Console
    ...
    ...    example:
    ...    | Set Default | ${s1_alias} |
    AC.Enable Mode    ${alias}
    Telnet.Write    set default
    Telnet.Read Until Regexp    \\[Y/N\\]    [-a-zA-Z0-9_. ]{1,30}(\\(.*\\))?#
    Telnet.Write    Y
    Telnet.Read Until Prompt

Show Version
    [Arguments]    ${alias}
    AC.Enable Mode    ${alias}
    ${output}=    AC.Exec Cmd    ${alias}    show version
    Log    ${output}
    [Return]    ${output}

Set Exec TimeOut
    [Arguments]    ${alias}    ${timeout}=0
    AC.Exec Cmd List    ${alias}    config    exec-timeout ${timeout}

Set WatchDog Disable
    [Arguments]    ${alias}
    AC.Exec Cmd List    ${alias}    config    watchdog disable

Get Cpu Mac
    [Arguments]    ${alias}    ${input}=show interface detail | include address is
    AC.Enable Mode    ${alias}
    ${output}=    AC.Exec Cmd    ${alias}    ${input}
    ${cpuMac}=    Tools.Get Value From String    ${output}    .*?,\\s+address is\\s(.*?)\\r\\n
    Should Not Be Equal    ${cpuMac}    ${None}
    [Return]    ${cpuMac}

Get Vlan Mac
    [Arguments]    ${alias}
    AC.Enable Mode    ${alias}
    ${output}=    AC.Exec Cmd    ${alias}    show interface vlan 1
    ${isIntVlan1}=    Tools.Is Match From String    ${output}    .*? doesn't exist or error
    Run Keyword If    ${isIntVlan1} == ${True}    AC.Exec Cmd List In ConfigMode    ${alias}    interface vlan 1
    Run Keyword If    ${isIntVlan1} == ${True}    Sleep    2
    ${output}=    AC.Exec Cmd    ${alias}    show interface vlan 1
    ${vlanMac}=    Tools.Get Value From String    ${output}    .*?,\\s+address is\\s(.*?)\\r\\n
    Should Not Be Equal    ${vlanMac}    ${None}
    Run Keyword If    ${isIntVlan1} == ${True}    AC.Exec Cmd List In ConfigMode    ${alias}    no interface vlan 1
    [Return]    ${vlanMac}

Enter BootRom From Img
    [Arguments]    ${alias}    ${regexp_testram}=Testing RAM    ${regexp_bootrom}=\\[Boot\\]:    ${timeout}=3 minutes
    AC.Enable Mode    ${alias}
    Telnet.Write    reload
    Telnet.Read Until Regexp    \\[Y/N\\]
    Telnet.Write    Y
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_testram}
    Telnet.Write    \x02
    Telnet.Read Until Regexp    ${regexp_bootrom}
    Telnet.Set Timeout    ${wifi_ac_timeout}
    Telnet.Read

Enter BootRom From BootRom
    [Arguments]    ${alias}    ${regexp_testram}=Testing RAM    ${regexp_bootrom}=\\[Boot\\]:    ${timeout}=3 minutes
    Telnet.Switch Connection    ${alias}
    Telnet.Write    reboot
    Telnet.Set Timeout    ${timeout}
    Telnet.Read Until Regexp    ${regexp_testram}
    Telnet.Write    \x02
    Telnet.Read Until Regexp    ${regexp_bootrom}
    Telnet.Set Timeout    ${wifi_ac_timeout}
    Telnet.Read

Login
    [Arguments]    ${alias}    ${username}=${wifi_ac_username}    ${password}=${wifi_ac_password}
    Telnet.Switch Connection    ${alias}
    Telnet.Write    ${username}
    Telnet.Read Until Regexp    Password:
    Telnet.Write    ${password}
    Telnet.Read Until Prompt

Exec Cmd List In WirelessMode
    [Arguments]    ${alias}    @{cmd_list}
    [Documentation]    KeyWord: Exec Cmd List In ConfigMode
    ...
    ...    \ exec command list based on config mode
    ...
    ...    args:
    ...
    ...    - ${alias}: alias name of console,built on keyword of Open Console
    ...    - @{cmd_list}: list of cmd string
    ...
    ...    example:
    ...    | Exec Cmd List In ConfigMode | ${s1_alias} | interface ${s1p1} | shutdown |
    AC.Exec Cmd List In ConfigMode    ${alias}    wireless
    ${output_list}    Create List
    : FOR    ${cmd}    IN    @{cmd_list}
    \    ${out}=    AC.Exec Cmd    ${alias}    ${cmd}
    \    Collections.Append To List    ${output_list}    ${out}
    Log List    ${output_list}

Wait For AP Profile Apply OK
    [Arguments]    ${alias}    ${profileid}    ${timeout}=${120}    ${cmd}=show wireless ap status
    AC.Enable Mode    ${alias}
    Sleep    10
    : FOR    ${index}    IN RANGE    0    ${timeout}    10
    \    ${output}=    AC.Exec Cmd    ${alias}    ${cmd}
    \    ${apProfileNum}=    Tools.Find All Num From String    ${output}    (?im)([0-9A-F]{2}-){5}[0-9A-F].*?\\s+${profileid}\\s
    \    ${apstatusNum}=    Tools.Find All Num From String    ${output}    (?im)\\s+${profileid}\\s+Managed\\s+Success
    \    Run Keyword If    ${apstatusNum} == ${apProfileNum}    Exit For Loop
    \    Sleep    10

Apply AP Profile
    [Arguments]    ${alias}    ${profileId}    ${timeout}=${130}
    AC.Enable Mode    ${alias}
    Telnet.Write    wireless ap profile apply ${profileId}
    ${output}=    Telnet.Read Until Regexp    \\[Y/N\\]    [-a-zA-Z0-9_. ]{1,30}#
    : FOR    ${index}    IN RANGE    0    ${timeout}    10
    \    ${writeFlag}=    Tools.Is Match From String    ${output}    \\[Y/N\\]
    \    ${exitFlag}=    Tools.Is Match From String    ${output}    (?m)^[-a-zA-Z0-9_. ]{1,30}#
    \    Run Keyword If    ${exitFlag}    Exit For Loop
    \    Run Keyword If    ${index} != 0    Sleep    10
    \    Run Keyword If    ${writeFlag}    Telnet.Write    Y
    \    ${output}=    Telnet.Read Until Regexp    \\[Y/N\\]    [-a-zA-Z0-9_. ]{1,30}#
    Telnet.Read
    AC.Enable Mode    ${alias}

Get Debug Output Until Expect
    [Arguments]    ${alias}    ${expect}    ${timeout}=${180}
    [Documentation]    在debug信息中查找expect信息，并返回信息，注意如果没有expect信息，在timeout到时候会返回全部信息
    ...
    ...    参数：
    ...    - alias：设备console别名
    ...    - expect： 要查找的信息
    ...    - timeout：默认180s，注意单位为s
    ...
    ...    返回：是否查找成功，输出信息
    ...
    ...    用法：
    ...    - 先使用关键字Start Debug
    ...    - 然后Get Debug Output Until Expect
    ...    - 最后关闭debug： Stop Debug
    Telnet.Switch Connection    ${alias}
    ${telneTimeout}=    Evaluate    ${timeout} + 60
    Telnet.Set Timeout    ${telneTimeout}
    ${output}=    Set Variable    ${EMPTY}
    : FOR    ${index}    IN RANGE    0    ${timeout}
    \    ${ioutput}=    Telnet.My Read Lazy
    \    ${output}=    Evaluate    '''${ioutput}'''+'''${output}'''
    \    ${matchFlag}=    Tools.Is Match From String    ${output}    ${expect}
    \    Run Keyword If    ${matchFlag}    Exit For Loop
    \    Sleep    1
    Telnet.Set Timeout    ${wifi_ac_timeout}
    Log    ${output}
    [Return]    ${matchFlag}    ${output}

Stop Debug
    [Arguments]    ${alias}    ${cmd}=no debug all
    [Documentation]    关闭 debug
    ...
    ...    参数：
    ...    - alias：设备console别名
    ...    - cmd： 默认为ctrl-o
    Telnet.Switch Connection    ${alias}
    Telnet.Write    ${cmd}
    Telnet.Read Until Prompt
    Telnet.Read

Start Debug
    [Arguments]    ${alias}    ${cmd}
    [Documentation]    打开debug
    ...
    ...    参数：
    ...    - alias：设备console别名
    ...    - cmd：debug命令
    Telnet.Switch Connection    ${alias}
    Telnet.Write    ${cmd}

Get Debug Output Until Timeout
    [Arguments]    ${alias}    ${timeout}
    [Documentation]    获取timeout时间内的debug信息
    ...
    ...    参数：
    ...    - alias：设备console别名
    ...    - timeout： \ 注意单位为s
    ...
    ...    返回：timeout时间内的输出信息
    ...
    ...    用法：
    ...    - 先使用关键字Start Debug
    ...    - 然后Get Debug Output Until Timeout
    ...    - 最后关闭debug： Stop Debug
    Telnet.Switch Connection    ${alias}
    ${telneTimeout}=    Evaluate    ${timeout} + 60
    Telnet.Set Timeout    ${telneTimeout}
    Sleep    ${timeout}
    ${output}=    Telnet.My Read Lazy
    Telnet.Set Timeout    ${wifi_ac_timeout}
    Log    ${output}
    [Return]    ${output}

Get Debug
    [Arguments]    ${alias}
    [Documentation]    获取debug信息,该关键字会读取console的内容并立刻返回
    ...
    ...    参数：
    ...    - alias：设备console别名
    ...
    ...    返回：debug输出信息
    ...
    ...    用法：
    ...    - 先使用关键字Start Debug
    ...    - 然后可以进行其他操作
    ...    - Get Debug，获取第2步操作过程中的debug信息
    ...    - 最后关闭debug： Stop Debug
    Telnet.Switch Connection    ${alias}
    ${output}=    Telnet.My Read Lazy
    Log    ${output}
